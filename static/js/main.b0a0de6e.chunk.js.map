{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["devSchool","props","inputOnchangeHandler","event","setState","target","name","value","onSubmitHandler","e","preventDefault","payload","first_name","state","last_name","email","buttonDisabled","url","formStatus","addMember","editMember","axios","post","then","response","members","push","data","catch","error","console","log","put","indexMember","findIndex","member","id","memberIdSelected","editButtonHandler","get","className","style","marginTop","this","map","border","key","margin","onClick","onSubmit","type","onChange","disabled","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.b0a0de6e.chunk.js","sourcesContent":["import React,{Component} from 'react';\nimport './App.css';\nimport axios from 'axios';\n\nclass devSchool extends Component{\n\n\n\nconstructor(props) {\n    super(props)\n    this.state = {\n      members : [],\n      first_name: '',\n      last_name: '',\n      email: '',\n      buttonDisabled: false,\n      formStatus : 'create',\n      memberIdSelected: null,\n    }\n  }\n\n\n  componentDidMount(){\n    axios.get('https://reqres.in/api/users?page=1')\n    .then(response=> {\n      this.setState({members: response.data.data})\n    })\n    .catch(error => {\n      console.log('error', error)\n    });\n    \n  }\n\n  render(){\n\n\n\n    return(\n\n        <div className = \"container\">\n          <h1 style={{marginTop: 1 + 'em'}} > Development School</h1>\n        \n          <div className=\"row\" style={{marginTop: 5 + 'em'}}>\n\n              { this.state.members.map((member) =>(\n\n                <div className=\"col-md-6\" style={{border:'1px solid black'}} key={member.id}>\n                  <h3> Member </h3>\n                  <div className=\"card\" style={{margin: 10 }}>\n                    <div className=\"card-body\">\n                      <h5 className=\"card-title\"> {member.id} </h5>\n                      <h5 className=\"card-title\"> {member.first_name} </h5>\n                      <h5 className=\"card-title\"> {member.last_name} </h5>\n                      <h5 className=\"card-title\"> {member.email} </h5>\n                      <button className=\"btn btn-primary\" onClick={()=>this.editButtonHandler(member)}>Edit</button> \n                      &nbsp;\n                      <button className=\"btn btn-danger\">Delete</button>\n                    </div>\n                  </div>\n                </div>\n                ))}\n              \n\n\n              <div className=\"col-md-12\" style={{border:'1px solid black'}}>\n              <h3> Form {this.state.formStatus}</h3>\n              <form onSubmit={this.onSubmitHandler}>\n                <div className=\"form-group\">\n                  <label> First Name </label>\n                  <input type=\"text\" className=\"form-control\" name=\"first_name\" value={this.state.first_name} onChange={this.inputOnchangeHandler}/>\n                </div>\n                <div className=\"form-group\">\n                  <label> Last Name </label>\n                  <input type=\"text\" className=\"form-control\" name=\"last_name\" value={this.state.last_name} onChange={this.inputOnchangeHandler}/>\n                </div>\n                <div className=\"form-group\">\n                  <label> Email </label>\n                  <input type=\"text\" className=\"form-control\" name=\"email\" value={this.state.email} onChange={this.inputOnchangeHandler}/>\n                </div>\n                <button type=\"submit\" className=\"btn btn-primary\" disabled={this.state.buttonDisabled}>Submit</button>\n\n              </form>\n\n            </div>\n          </div>\n        </div>\n              \n      );\n  }\n\n  inputOnchangeHandler = (event)=>{\n    this.setState({[event.target.name]:event.target.value})\n  }\n\n  onSubmitHandler = (e) => {\n    e.preventDefault()\n    var payload ={\n      first_name: this.state.first_name,\n      last_name: this.state.last_name,\n      email: this.state.email\n    }\n    this.setState({buttonDisabled:true})\n\n    var url = 'https://reqres.in/api/users'\n    if(this.state.formStatus === 'create'){\n      this.addMember(url,payload)\n    }else{\n      url = 'https://reqres.in/api/users/${this.state.memberIdSelected}'\n      this.editMember(url,payload)\n    }\n\n\n  }\n\n    addMember = (url,payload) => {\n          axios.post(url,payload)\n          .then(response=> {\n          var members = [...this.state.members]\n          members.push(response.data)\n          this.setState({members, buttonDisabled : false, first_name:'', last_name:'', email:''})\n          })\n          .catch(error => {\n            console.log(error)\n          })\n\n         }\n    \n\n\n    editMember = (url, payload)=>{\n      axios.put(url,payload)\n      .then(response => {\n        var members = [...this.state.members]\n        var indexMember = members.findIndex(member => member.id === this.state.memberIdSelected)\n\n        members[indexMember].first_name = response.data.first_name\n        members[indexMember].last_name = response.data.last_name\n        members[indexMember].email = response.data.email\n\n        this.setState({\n          members,\n          first_name: '',\n          last_name: '',\n          email: '',\n          buttonDisabled: false,\n          formStatus : 'create',\n\n        })\n\n      })\n      .catch(error => {\n\n        console.log(error)\n      })\n    }\n    \n\n  editButtonHandler = (member)=>{\n    this.setState({\n      first_name : member.first_name,\n      last_name : member.last_name,\n      email : member.email,\n      formStatus : 'edit',\n      memberIdSelected : member.id,\n    })\n  }\n\n\n\n}\n\nexport default devSchool;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}